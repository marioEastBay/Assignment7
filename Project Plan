Group 3: Abia Khan and Mario Salinas
NetID: ac6212 and ry7931 
CS 301-03 
11/8/23


Assignment 7 Project Plan


Test cases: 15
We tested...


Expectations: 
We expect the program to...
We expect the program to run successfully and that each test will pass. 


Class names: Node, BST 

Functions: while, if-else, Queue, Dequeue, ifstream


Logic we tried to implement:

#include <iostream>
#include <fstream>
#include <queue>

using namespace std;

// Node class for BST
class Node {
public:
    int data;
    Node* left;
    Node* right;
    Node(int val) : data(val), left(nullptr), right(nullptr) {}
};

// Binary Search Tree Class
class BST {
    Node* root;

    void inorderTraversal(Node* node, queue<int> &q) {
        if (node == nullptr) return;
        inorderTraversal(node->left, q);
        q.push(node->data);
        inorderTraversal(node->right, q);
    }

public:
    BST() : root(nullptr) {}

    void insert(int val) {
        if (root == nullptr) {
            root = new Node(val);
            return;
        }
        Node* temp = root;
        Node* parent = nullptr;

        while (temp != nullptr) {
            parent = temp;
            if (val < temp->data) {
                temp = temp->left;
            } else {
                temp = temp->right;
            }
        }

        if (val < parent->data) {
            parent->left = new Node(val);
        } else {
            parent->right = new Node(val);
        }
    }

    void fillQueue(queue<int> &q) {
        inorderTraversal(root, q);
    }
};

int main() {
    ifstream inputFile("input1.txt"); // Assuming numbers.txt contains the numbers.
    int num;
    BST bst;
    queue<int> q;

    if (inputFile.is_open()) {
        while (inputFile >> num) {
            cout << "Reading from file: " << num << endl;
            bst.insert(num);
        }
        inputFile.close();
    } else {
        cout << "Unable to open file" << endl;
        return 1;
    }

    bst.fillQueue(q);

    cout << "\nDequeue and Display:\n";
    while (!q.empty()) {
        cout << q.front() << " ";
        q.pop();
    }
    cout << endl;

    return 0;
}

